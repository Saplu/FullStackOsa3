{"version":3,"sources":["components/PersonChecker.js","components/Person.js","components/Persons.js","services/persons.js","components/notification.js","App.js","index.js"],"names":["PersonChecker","persons","newName","console","log","map","p","name","includes","Person","number","deletePerson","onClick","Persons","filterString","personsToShow","filter","toLowerCase","key","id","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","message","type","className","App","useState","setPersons","setNewName","newNumber","setNewNumber","setFilter","noteMessage","setNoteMessage","noteType","setNoteType","useEffect","personService","initialPersons","update","window","confirm","person","find","changedPerson","returnedPerson","catch","error","setTimeout","value","onChange","event","target","onSubmit","preventDefault","persObject","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.771c1dee.chunk.js","sourcesContent":["const PersonChecker = ({persons, newName}) => {\r\n    console.log(persons, newName)\r\n    const names = persons.map(p => p.name)\r\n    return(\r\n        names.includes(newName)\r\n    )\r\n}\r\n\r\nexport default PersonChecker","import React from 'react'\r\n\r\nconst Person = ({name, number, deletePerson}) => {\r\n    return(\r\n        <div>\r\n            <h4>{name} {number} <button onClick={deletePerson}>delete</button></h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\nconst Persons = ({persons, filterString, deletePerson}) => {\r\n    const personsToShow = persons.filter(p => p.name.toLowerCase().includes(filterString.toLowerCase()))\r\n    return(\r\n        <div>\r\n            {personsToShow.map(p=> <Person \r\n                key={p.name} \r\n                name={p.name} \r\n                number={p.number} \r\n                deletePerson={() => deletePerson(p.id, p.name)}/>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Persons","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = id => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update, deletePerson}","import React from 'react'\r\n\r\nconst Notification = ({message, type}) => {\r\n    if (message === null)\r\n        return null\r\n    return(\r\n        <div className={type}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, {useState, useEffect} from 'react';\r\nimport PersonChecker from './components/PersonChecker'\r\nimport Persons from './components/Persons'\r\nimport personService from './services/persons'\r\nimport Notification from './components/notification'\r\n\r\nconst App = () => {\r\n    const [ persons, setPersons] = useState([]) \r\n    const [ newName, setNewName ] = useState('')\r\n    const [newNumber, setNewNumber] = useState('')\r\n    const [filter, setFilter] = useState('')\r\n    const [noteMessage, setNoteMessage] = useState(null)\r\n    const [noteType, setNoteType] = useState('success')\r\n\r\n    useEffect(() => {\r\n      personService\r\n        .getAll()\r\n        .then(initialPersons => {\r\n          setPersons(initialPersons)\r\n        })\r\n    }, [])\r\n\r\n    const addPerson = (event) => {\r\n        event.preventDefault()\r\n        console.log(newName)\r\n        const persObject = {\r\n          name: newName,\r\n          number: newNumber\r\n        }\r\n        if(PersonChecker({persons, newName}))\r\n          update()\r\n        else{\r\n\r\n        personService\r\n          .create(persObject)\r\n          .then(returnedPerson => {\r\n            setPersons(persons.concat(returnedPerson))\r\n            setNewName('')\r\n            setNewNumber('')\r\n          })\r\n          .catch(error => {\r\n            setNoteType('error')\r\n            setNoteMessage(error.response.data.error)\r\n            setTimeout(() => {\r\n              setNoteMessage(null)\r\n              setNoteType('success')\r\n            }, 5000)\r\n          })\r\n          setNoteMessage(\r\n            `${persObject.name} added to phonebook.`\r\n          )\r\n          setTimeout(() => {\r\n            setNoteMessage(null)\r\n          }, 5000)\r\n        }\r\n    }\r\n\r\n    const deletePerson = (id, name) => {\r\n      if (window.confirm(`Really want to delete ${name}? :(`)){\r\n        personService\r\n        .deletePerson(id)\r\n        setPersons(persons.filter(p => p.id !== id))\r\n        setNoteMessage(\r\n          `${name} succesfully and permanently deleted.`\r\n        )\r\n        setTimeout(() => {\r\n          setNoteMessage(null)\r\n        }, 5000)\r\n      }\r\n    }\r\n\r\n    const update = () => {\r\n      if (window.confirm(`${newName} already exists. Want to replace the old number?`)){\r\n        const person = persons.find(p => p.name === newName)\r\n        const changedPerson = {...person, number: newNumber}\r\n          personService\r\n          .update(changedPerson.id, changedPerson)\r\n          .then(returnedPerson => {\r\n            setPersons(persons.map(p => p.id !== changedPerson.id ? p : returnedPerson))\r\n          })\r\n          .catch(error => {\r\n            setNoteType('error')\r\n            setNoteMessage(`${newName} has already been deleted from the server.`)\r\n            setTimeout(() => {\r\n              setNoteMessage(null)\r\n              setNoteType('success')\r\n            }, 5000)\r\n            setPersons(persons.filter(p => p.id !== person.id))\r\n          })\r\n          setNoteMessage(\r\n            `Number of ${newName} updated.`\r\n          )\r\n          setTimeout(() => {\r\n            setNoteMessage(null)\r\n          }, 5000)\r\n          setNewName('')\r\n          setNewNumber('')\r\n      }\r\n    }\r\n\r\n    const handleNameChange = (event) => {\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const handleNumberChange = (event) => {\r\n      setNewNumber(event.target.value)\r\n    }\r\n\r\n    const handleFilterChange = (event) => {\r\n      setFilter(event.target.value)\r\n    }\r\n  \r\n    return (\r\n      <div>\r\n        <h2>Phonebook</h2>\r\n        <Notification message={noteMessage} type={noteType}/>\r\n        <form>\r\n          <div>\r\n            filter with: <input\r\n            value={filter}\r\n            onChange={handleFilterChange}/>\r\n          </div>\r\n        </form>\r\n        <h2>Add a new person</h2>\r\n        <form onSubmit={addPerson}>\r\n          <div>\r\n            name: <input \r\n            value={newName}\r\n            onChange={handleNameChange}/>\r\n          </div>\r\n          <div>\r\n            number: <input\r\n            value={newNumber}\r\n            onChange={handleNumberChange}/>\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\">add</button>\r\n          </div>\r\n        </form>\r\n        <h2>Numbers</h2>\r\n        <Persons persons={persons} filterString={filter} deletePerson={deletePerson}/>\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}